/**
 * @fileoverview Firestore Security Rules for the Noteworthy application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for notes and summaries.
 * Only the authenticated user who owns a given note or summary can read,
 * create, update, or delete it.  All data is nested under `/users/{userId}`,
 * ensuring that access control is primarily path-based and relies on the
 * Firebase Authentication UID for identity verification.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. The 'userId' must match the Firebase Auth UID.
 * - /users/{userId}/notes/{noteId}: Stores notes created by the specified user.
 * - /users/{userId}/notes/{noteId}/summaries/{summaryId}: Stores summaries related to a specific note.
 *
 * Key Security Decisions:
 * - User listing is implicitly disallowed. Rules only allow access to individual
 *   user documents based on their UID.
 * - Authorization Independence: Rules use path-based ownership; no 'get()' calls are needed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user with matching UID can create their profile.
     * @allow (get, update, delete) - Authenticated user with matching UID can access and modify their profile.
     * @deny (create) - If the user ID in the request does not match the authenticated user's ID.
     * @deny (get, update, delete) - If the user ID in the path does not match the authenticated user's ID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == userId;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces user-ownership for notes.
     * @path /users/{userId}/notes/{noteId}
     * @allow (create) - Authenticated user with matching UID can create a note under their profile.
     * @allow (get, list, update, delete) - Authenticated user with matching UID can access and modify notes under their profile.
     * @deny (create) - If the user ID in the path does not match the authenticated user's ID.
     * @deny (get, update, delete) - If the user ID in the path does not match the authenticated user's ID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/notes/{noteId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource.data.userId == userId && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces user-ownership for summaries.
     * @path /users/{userId}/notes/{noteId}/summaries/{summaryId}
     * @allow (create) - Authenticated user with matching UID can create a summary under their note.
     * @allow (get, list, update, delete) - Authenticated user with matching UID can access and modify summaries under their note.
     * @deny (create) - If the user ID in the path does not match the authenticated user's ID.
     * @deny (get, update, delete) - If the user ID in the path does not match the authenticated user's ID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/notes/{noteId}/summaries/{summaryId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }
  }
}