/**
 * @fileoverview Firestore Security Rules for the Noteworthy application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user can only
 * access their own data, and data is segregated by user ID.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/notes/{noteId}: Stores notes created by a specific user.
 *
 * Key Security Decisions:
 * - Users can only access their own user document.
 * - Users can only access notes they have created.
 * - Listing notes is restricted to the owning user.
 * - No public data or roles are implemented.
 *
 * Denormalization for Authorization:
 * The `userId` is included in the path for notes, and this matches the
 * `userId` field within the note document itself. This enables path-based
 * authorization and avoids the need for complex `get()` calls to determine
 * ownership.
 *
 * Structural Segregation:
 * Private user data and notes are stored under the `/users/{userId}` path,
 * ensuring that only the authenticated user can access this information.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their own user document at /users/user_abc.
     * @allow (get) - User with UID 'user_abc' can get their own user document at /users/user_abc.
     * @allow (update) - User with UID 'user_abc' can update their own user document at /users/user_abc.
     * @allow (delete) - User with UID 'user_abc' can delete their own user document at /users/user_abc.
     * @deny (create) - User with UID 'user_xyz' cannot create a user document at /users/user_abc.
     * @deny (get) - User with UID 'user_xyz' cannot get the user document at /users/user_abc.
     * @deny (update) - User with UID 'user_xyz' cannot update the user document at /users/user_abc.
     * @deny (delete) - User with UID 'user_xyz' cannot delete the user document at /users/user_abc.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not allowed.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to notes created by a user.
     * @path /users/{userId}/notes/{noteId}
     * @allow (create) - User with UID 'user_abc' can create a note under /users/user_abc/notes/{noteId}.
     * @allow (get) - User with UID 'user_abc' can get a note under /users/user_abc/notes/{noteId}.
     * @allow (update) - User with UID 'user_abc' can update a note under /users/user_abc/notes/{noteId}.
     * @allow (delete) - User with UID 'user_abc' can delete a note under /users/user_abc/notes/{noteId}.
     * @deny (create) - User with UID 'user_xyz' cannot create a note under /users/user_abc/notes/{noteId}.
     * @deny (get) - User with UID 'user_xyz' cannot get a note under /users/user_abc/notes/{noteId}.
     * @deny (update) - User with UID 'user_xyz' cannot update a note under /users/user_abc/notes/{noteId}.
     * @deny (delete) - User with UID 'user_xyz' cannot delete a note under /users/user_abc/notes/{noteId}.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/notes/{noteId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    // ---- Helper functions ----

    /**
     * @description Checks if the request is authenticated.
     * @return {boolean} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided userId.
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

     /**
      * @description Checks if the authenticated user is the owner of an existing document.
      *              This function combines the ownership check with a document existence check.
      * @param {string} userId The user ID to compare against.
      * @return {boolean} True if the user is the owner and the document exists, false otherwise.
      */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}